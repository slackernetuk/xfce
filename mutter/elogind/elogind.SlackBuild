#!/bin/bash

# Copyright 2020  Patrick J. Volkerding, Sebeka, Minnesota, USA
# Copyright 2016  Eric Hameleers, Eindhoven, NL
# Copyright 2017  Widya Walesa, Malang, JATIM, ID
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=elogind
VERSION=${VERSION:-$(echo $PKGNAM-*.tar.?z | rev | cut -f 3- -d . | cut -f 1 -d - | rev)}
BUILD=${BUILD:-1}

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i586 ;;
    arm*) readelf /usr/bin/file -A | egrep -q "Tag_CPU.*[4,5]" && ARCH=arm || ARCH=armv7hl ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *) ARCH=$(uname -m) ;;
  esac
  export ARCH
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-$BUILD.txz"
  exit 0
fi

NUMJOBS=${NUMJOBS:-" -j$(expr $(nproc) + 1) "}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

TMP=${TMP:-/tmp}
PKG=$TMP/package-$PKGNAM

# Note from RW: perhaps we are not tied to legacy any more if we go this route??
#
# Slackware still using cgroup v1 or legacy mode
# CGROUPMODE=$([ $(stat -fc %T /sys/fs/cgroup/) = "cgroup2fs" ] && echo "unified" || ( [ -e /sys/fs/cgroup/unified/ ] && echo "hybrid" || echo "legacy"))
CGROUPMODE=${CGROUPMODE:-"legacy"}

rm -rf $PKG
mkdir -p $TMP $PKG

cd $TMP
rm -rf $PKGNAM-$VERSION
tar xvf $CWD/$PKGNAM-$VERSION.tar.?z || exit 1
cd $PKGNAM-$VERSION || exit 1

chown -R root:root .
find . \
  \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
  -exec chmod 755 {} \+ -o \
  \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
  -exec chmod 644 {} \+

# Our nobody user has UIDNumber 99, not 65534:
sed -e "s/65534/99/g" -i $(grep -lr 65534 .)

zcat $CWD/elogind-polkit.patch.gz | patch -p1 --verbose || exit 1

# Start elogind automatically via dbus 
sed -e "s,/bin/false,/lib${LIBDIRSUFFIX}/elogind," -i src/login/org.freedesktop.login1.service.in

meson $BUILD_OPTS \
  --buildtype release \
  --prefix /usr \
  --libdir /usr/lib${LIBDIRSUFFIX} \
  -Drootlibdir="/lib${LIBDIRSUFFIX}" \
  -Drootlibexecdir="/lib${LIBDIRSUFFIX}/elogind" \
  -Dudevrulesdir="/etc/udev/rules.d" \
  -Ddocdir="/usr/doc/$PRGNAM-$VERSION" \
  -Dhtmldir="/usr/doc/$PRGNAM-$VERSION/html" \
  -Dmandir="/usr/man" \
  -Dman="true" \
  -Dbashcompletiondir="/usr/share/bash-completion/completions" \
  -Dpam=true \
  -Dpamlibdir="/lib${LIBDIRSUFFIX}/security" \
  -Dpamconfdir="/etc/pam.d" \
  -Dhtml=false \
  -Dacl=true \
  -Dutmp=true \
  -Ddefault-hierarchy=$CGROUPMODE \
  -Dcgroup-controller=elogind \
  -Dhalt-path="/sbin/halt" \
  -Dpoweroff-path="/sbin/poweroff" \
  -Dreboot-path="/sbin/reboot" \
  . builddir || exit 1

# Build and install:
ninja -C builddir || exit 1
DESTDIR=$PKG ninja install -C builddir || exit 1

# Create symlink for elogind binaries to /usr/bin
mkdir -p $PKG/usr/bin
ln -sf /bin/elogind-inhibit $PKG/usr/bin/elogind-inhibit
ln -sf /bin/loginctl $PKG/usr/bin/loginctl

# Add (probably unnecessary) init script
mkdir -p $PKG/etc/rc.d
sed "s,@LIBDIRSUFFIX@,${LIBDIRSUFFIX},g" $CWD/rc.elogind > \
  $PKG/etc/rc.d/rc.elogind.new
chmod 755 $PKG/etc/rc.d/rc.elogind.new

# Preserve old config
mv $PKG/etc/elogind/logind.conf $PKG/etc/elogind/logind.conf.new

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress man pages
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

# Add a documentation directory:
mkdir -p $PKG/usr/doc/${PKGNAM}-$VERSION
cp -a \
  LICENSE* README* TODO \
  $PKG/usr/doc/${PKGNAM}-$VERSION

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.txz
